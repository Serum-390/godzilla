name: Docker

on:
  push:

    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        required: false
        description: 'Test scenario tags'

env:
  IMAGE_ID: ghcr.io/serum-390/godzilla
  DOCKER_FILE: docker/godzilla.dockerfile

jobs:

#----------------------------------- TEST --------------------------------------

  # Run tests.
  test:

    name: Docker Build
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: godzilla
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin123
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      - name: Set up Java 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Run tests
        env:
          DB_HOST: "127.0.0.1"
          DB_PORT: ${{ job.services.postgres.ports[5432] }}
        run: |
          docker ps -a
          pwd
          ls -al
          mvn -B clean package
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file $DOCKER_FILE
          fi

#----------------------------------- PUSH --------------------------------------

  # Push image to GitHub Packages.
  push:

    # Ensure test job passes before pushing image.
    needs: test

    name: GitHub Packages Update
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: godzilla
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin123
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      - name: Set up Java 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build image
        env:
          DB_HOST: "127.0.0.1"
          DB_PORT: ${{ job.services.postgres.ports[5432] }}
        run: |
          docker ps -a
          pwd
          ls -al
          mvn -B clean package
          docker build . --file $DOCKER_FILE --tag $IMAGE_ID

      - name: Log into registry
        run: echo "${{ secrets.GODZILLA_OPS_PAT }}" | docker login ghcr.io -u ${{ secrets.GODZILLA_OPS_USERNAME }} --password-stdin

      - name: Push image
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo "Pushing image: $IMAGE_ID:$VERSION"

          docker tag $IMAGE_ID $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

#----------------------------------- DEPLOY ------------------------------------

  deploy:

    # After pushing to ghcr.io, the ECS cluster gets updated: https://godzilla.serum-390.app/
    needs: push

    name: ECS Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: .aws/godzilla-main-task.json
        container-name: Godzilla
        image: ghcr.io/serum-390/godzilla:latest

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: Godzilla-service
        cluster: godzilla
        wait-for-service-stability: true
